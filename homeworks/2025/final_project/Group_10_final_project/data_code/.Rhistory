mean_medium = mean(c(experiment_df$prior_coherence[which(experiment_df$priorLevel=="medium")]))
mean_high = mean(c(experiment_df$prior_coherence[which(experiment_df$priorLevel=="high")]))
mean_low
mean_medium
mean_high
experiment_df$meanCohStair = ifelse(experiment_df$priorLevel=="medium", mean_medium, mean_high)
experiment_df$meanCohStair[which(experiment_df$priorLevel=="low")] = mean_low
# To use the means of the staircases for fitting the psychometrics, use meanCohStair instead of prior_coherence
d = data.frame(coherence = c(staircase_df$coherence, experiment_df$prior_coherence),
coherentDir = c(staircase_df$direction, experiment_df$prior_direction),
rr = c(staircase_df$prior_key=="right", experiment_df$prior_key=="right"))
d$signed_coherence = d$coherence*-sign(d$coherentDir-1)
d$rr = as.integer(d$rr)
## This will fit the psychometric based on both training sessions and the experiment, all difficulty levels
fit = estimateNoise(d)
d$correct = c(staircase_df$prior_is_correct, experiment_df$prior_is_correct)
d$task = c(rep("control",length(staircase_df$prior_is_correct)), rep("exp", length(experiment_df$prior_is_correct)))
d$choice = c(staircase_df$prior_key, experiment_df$prior_key)
choices = d %>% dplyr::group_by(signed_coherence, task) %>%
dplyr::summarise(choice = sum(choice=="right")/length(choice))
lambda = fit[[3]]
mu = fit[[2]]
sigma = fit[[1]]
# To visualize the psychometric fit - y axis is probability of choosing right and x is signed coherence (neg for left)
if (!(is.na(lambda)||is.na(mu)||is.na(sigma))){
sim = function(x){lambda + (1-2*lambda) * 0.5 * Re((1+erf((x-mu)/(sqrt(2)*sigma))))}
x = seq(0.01,1,0.01)
x = seq(-1,1,0.01)
xSim = lapply(x, sim)
xSim = unlist(xSim,use.names=F)
fitFun = data.frame(x=x, y=xSim)
fitPlot = ggplot(fitFun, aes(x=x, y=y)) +
geom_line() +
geom_point(data=choices, aes(x=signed_coherence,y=choice, color=task))
}
fitPlot
experiment_df$fitNoiseRaw = sigma
experiment_df$fitBiasRaw = mu
experiment_df$fitLapseRaw = lambda
if (subj == unique(experiment$ID)[1]){
exp_fitNoiseRaw = experiment_df
}else{
exp_fitNoiseRaw = rbind(exp_fitNoiseRaw, experiment_df)
}
}
exp_fitNoiseRaw$priorLevelInt = 1
exp_fitNoiseRaw$priorLevelInt[exp_fitNoiseRaw$priorLevel=="medium"] = 2
exp_fitNoiseRaw$priorLevelInt[exp_fitNoiseRaw$priorLevel=="high"] = 3
exp_fitNoiseRaw$targetLevelInt = 1
exp_fitNoiseRaw$targetLevelInt[exp_fitNoiseRaw$targetLevel=="medium"] = 2
exp_fitNoiseRaw$targetLevelInt[exp_fitNoiseRaw$targetLevel=="high"] = 3
exp_fitNoiseRaw$condition = ifelse(exp_fitNoiseRaw$priorLevelInt>exp_fitNoiseRaw$targetLevelInt,"prior","target")
exp_fitNoiseRaw$condition = as.factor(exp_fitNoiseRaw$condition)
exp_fitNoiseRaw$conf = as.integer(exp_fitNoiseRaw$confidence)
save(exp_fitNoiseRaw, file=file.path(dataPath, "expFitNoiseRaw.RData"))
print(fitPlot)
fitPlot = ggplot(fitFun, aes(x=x, y=y)) +
geom_line() +
geom_point(data=choices, aes(x=signed_coherence,y=choice, color=task))
fitPlot
if (!(is.na(lambda)||is.na(mu)||is.na(sigma))){
sim = function(x){lambda + (1-2*lambda) * 0.5 * Re((1+erf((x-mu)/(sqrt(2)*sigma))))}
x = seq(0.01,1,0.01)
x = seq(-1,1,0.01)
xSim = lapply(x, sim)
xSim = unlist(xSim,use.names=F)
fitFun = data.frame(x=x, y=xSim)
fitPlot = ggplot(fitFun, aes(x=x, y=y)) +
geom_line() +
geom_point(data=choices, aes(x=signed_coherence,y=choice, color=task))
}
fitPlot
if (!(is.na(lambda)||is.na(mu)||is.na(sigma))){
sim = function(x){lambda + (1-2*lambda) * 0.5 * Re((1+erf((x-mu)/(sqrt(2)*sigma))))}
x = seq(0.01,1,0.01)
x = seq(-1,1,0.01)
xSim = lapply(x, sim)
xSim = unlist(xSim,use.names=F)
fitFun = data.frame(x=x, y=xSim)
fitPlot = ggplot(fitFun, aes(x=x, y=y)) +
geom_line() +
geom_point(data=choices, aes(x=signed_coherence,y=choice, color=task))
}
fitPlot
remove.packages("gtable")
install.packages("gtable")
fitPlot
library(ggplot2)
library(patchwork)
library(dplyr)
library(here)
source(here::here("Functions/simulateDistribution_forPredictions.R"))
mode_m <<- 2
diffPrior_all = c(seq(0.01,0.71,0.05),seq(0.21,0.91,0.05))
diffTarget_all = c(seq(0.21,0.91,0.05),seq(0.01,0.71,0.05))
data_opt2 = simulateDistribution_forPredictions(2.17,1,1,1,diffPrior_all, diffTarget_all,100000)
data_over2 = simulateDistribution_forPredictions(2.17,0.33,1,1,diffPrior_all, diffTarget_all,100000)
data_under2 = simulateDistribution_forPredictions(2.17,3,1,1,diffPrior_all, diffTarget_all,100000)
data_fit2 = simulateDistribution_forPredictions(2.17,1.27,1,1,diffPrior_all, diffTarget_all,100000)
mode_m <<- 2
diffPrior_all = c(seq(0.01,0.71,0.05),seq(0.21,0.91,0.05))
diffTarget_all = c(seq(0.21,0.91,0.05),seq(0.01,0.71,0.05))
data_opt2 = simulateDistribution_forPredictions(2.17,1,1,1,diffPrior_all, diffTarget_all,100000)
library(ggplot2)
library(patchwork)
library(dplyr)
library(here)
source(here::here("Functions/simulateDistribution_forPredictions.R")) # 用此函数生成模拟数据
mode_m <<- 2
diffPrior_all = c(seq(0.01,0.71,0.05),seq(0.21,0.91,0.05))
diffTarget_all = c(seq(0.21,0.91,0.05),seq(0.01,0.71,0.05))
data_opt2 = simulateDistribution_forPredictions(2.17,1,1,1,diffPrior_all, diffTarget_all,100000)
data_over2 = simulateDistribution_forPredictions(2.17,0.33,1,1,diffPrior_all, diffTarget_all,100000)
data_under2 = simulateDistribution_forPredictions(2.17,3,1,1,diffPrior_all, diffTarget_all,100000)
data_fit2 = simulateDistribution_forPredictions(2.17,1.27,1,1,diffPrior_all, diffTarget_all,100000)
data_opt1 = simulateDistribution_forPredictions(1,1,1,1,diffPrior_all, diffTarget_all, 10000)
data_over1 = simulateDistribution_forPredictions(0.33,1,1,1,diffPrior_all, diffTarget_all, 10000)
data_under1 = simulateDistribution_forPredictions(3,1,1,1,diffPrior_all, diffTarget_all, 10000)
data_opt2$weighting = "Optimal (wConf=1)"
data_over2$weighting = "Overweighted (wConf<1)"
data_under2$weighting = "Underweighted (wConf>1)"
data_fit2$weighting = "Less Underweighted (wConf<wChoice)"
data2 = rbind(data_opt2, data_over2, data_under2, data_fit2)
# 经行模拟并绘制模型预测的结果
library(ggplot2)
library(patchwork)
library(dplyr)
library(here)
source(here::here("Functions/simulateDistribution_forPredictions.R")) # 用此函数生成模拟数据
mode_m <<- 2
diffPrior_all = c(seq(0.01,0.71,0.05),seq(0.21,0.91,0.05))
diffTarget_all = c(seq(0.21,0.91,0.05),seq(0.01,0.71,0.05))
# R的内存不够用，原本的样本量是100000，现在改为了10000
data_opt2 = simulateDistribution_forPredictions(2.17,1,1,1,diffPrior_all, diffTarget_all,10000)
data_over2 = simulateDistribution_forPredictions(2.17,0.33,1,1,diffPrior_all, diffTarget_all,10000)
data_under2 = simulateDistribution_forPredictions(2.17,3,1,1,diffPrior_all, diffTarget_all,10000)
data_fit2 = simulateDistribution_forPredictions(2.17,1.27,1,1,diffPrior_all, diffTarget_all,10000)
data_opt1 = simulateDistribution_forPredictions(1,1,1,1,diffPrior_all, diffTarget_all, 10000)
data_over1 = simulateDistribution_forPredictions(0.33,1,1,1,diffPrior_all, diffTarget_all, 10000)
data_under1 = simulateDistribution_forPredictions(3,1,1,1,diffPrior_all, diffTarget_all, 10000)
data_opt2$weighting = "Optimal (wConf=1)"
data_over2$weighting = "Overweighted (wConf<1)"
data_under2$weighting = "Underweighted (wConf>1)"
data_fit2$weighting = "Less Underweighted (wConf<wChoice)"
data2 = rbind(data_opt2, data_over2, data_under2, data_fit2)
data2$precision = abs(data2$s1)+abs(data2$s2)
data2$condition = as.factor(data2$condition)
levels(data2$condition) = c("Lead","Target")
data2$correct2 = as.factor(data2$correct2)
levels(data2$correct2) = c("Incorrect", "Correct")
data2$weighting = factor(data2$weighting, levels=c("Optimal (wConf=1)","Overweighted (wConf<1)","Underweighted (wConf>1)","Less Underweighted (wConf<wChoice)"))
data_opt1$weighting = "Optimal (wChoice=1)"
data_over1$weighting = "Overweighted (wChoice<1)"
data_under1$weighting = "Underweighted (wChoice>1)"
data1 = rbind(data_opt1, data_over1, data_under1)
data1$precision = abs(data1$s1)+abs(data1$s2)
data1$condition = as.factor(data1$condition)
levels(data1$condition) = c("Lead","Target")
## Plot accuracy predictions
dataSumm1 = data1 %>% dplyr::group_by(precision, condition, weighting) %>%
dplyr::summarize(acc = sum(correct2)/length(correct2))
dataSumm1$condition = as.factor(dataSumm1$condition)
levels(dataSumm1$condition) = c("Stronger-Lead", "Stronger-Target")
accPreds = ggplot(dataSumm1, aes(x = precision, y = acc, color=condition)) +
geom_point(size=2, alpha=1) +
#geom_smooth() +
facet_wrap(~ weighting) +
scale_color_manual(values=c("#F4CC08", "#C73030")) +
labs(x = "Posterior Information", y = "Accuracy", color = "Condition",strip="Weighting of Prior") +
theme(axis.text.x = element_text(size=14), axis.title.x = element_text(size=16),
axis.text.y = element_text(size=14), axis.title.y = element_text(size=16),
strip.text = element_text(size=14),
legend.text = element_text(size=14), legend.title = element_text(size=16), legend.position = "bottom")
accPreds
### Plot confidence predictions
dataSumm2 = data2 %>% dplyr::group_by(precision, condition, correct2, weighting) %>%
dplyr::summarize(confTarget = mean(confTarget))
dataSumm2$posterior = as.factor(dataSumm2$precision)
levels(dataSumm2$posterior) = c("L","M","H")
summary = summarise_draws(bind_draws(fit$draws(variables=parameters), along = "chain"))
require(rstan)
require(shinystan)
require(parallel)
require(loo)
require(here)
require(dplyr)
library("ggplot2")
library("bayesplot")
library("rstanarm")
library("tictoc")
library(posterior)
library(cmdstanr)
library(bayestestR)
dataDir = here::here("Data/")
baseDir = here::here("Stan/hierarchical")
resultDir = here::here("Results/modelFits/")
load(file=file.path(dataDir, "expFitNoiseRaw.RData"))
summary = summarise_draws(bind_draws(fit$draws(variables=parameters), along = "chain"))
require(rstan)
require(shinystan)
require(parallel)
require(loo)
require(here)
require(dplyr)
library("ggplot2")
library("bayesplot")
library("rstanarm")
library("tictoc")
library(posterior)
library(cmdstanr)
library(bayestestR)
dataDir = here::here("Data/")
baseDir = here::here("Stan/hierarchical")
resultDir = here::here("Results/modelFits/")
load(file=file.path(dataDir, "expFitNoiseRaw.RData"))
fitModel = TRUE
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
##### Get real data for a subject to fit #####
experiment = exp_fitNoiseRaw
subjs = unique(experiment$ID)
# Exclude extreme outlier
subjs = subjs[c(1:8,10:21)]
i = 1
for (subj in subjs){
data = experiment %>% dplyr::filter(ID==subj)
# Adjust their raw coherence values
data$coherentDir1 = -sign(data$prior_direction-1)
data$signedCoh1 = data$prior_coherence*data$coherentDir1
data$adjCoh1 = (data$signedCoh1-data$fitBiasRaw)/data$fitNoiseRaw
data$coherentDir2 = -sign(data$target_direction-1)
data$signedCoh2 = data$target_coherence*data$coherentDir2
data$adjCoh2 = (data$signedCoh2-data$fitBiasRaw)/data$fitNoiseRaw
data$choice = 1
data$choice[data$discrimination_key=="left"] = 0
data$choice1 = 1
data$choice1[data$prior_key=="left"] = 0
## This takes the mean coherences per precision level (so, per staircase)
means = data %>% dplyr::group_by(priorLevel, prior_direction) %>%
dplyr::summarize(meanCohs = mean(adjCoh1))
means$priorLevel = factor(means$priorLevel, levels=c("low","medium","high"))
means = means[order(means$priorLevel),]
right_coh = means$meanCohs[means$prior_direction==0]
left_coh = means$meanCohs[means$prior_direction==180]
## Setup data
coh1_data = data$adjCoh1
coh2_data = data$adjCoh2
conf_data = data$conf/100
choice1_data = data$choice1
choice_data = data$choice
correct = data$discrimination_is_correct
posteriorFactor = data$posteriorFactor
condition = data$condition
data$dir1 = ifelse(data$coherentDir1==1,"R","L")
data$priorFact = "3"
data$priorFact[data$priorLevel=="low"] = "1"
data$priorFact[data$priorLevel=="medium"] = "2"
data$setting1 = paste(data$dir1,data$priorFact,sep="")
data$dir2 = ifelse(data$coherentDir2==1,"R","L")
data$targetFact = "3"
data$targetFact[data$targetLevel=="low"] = "1"
data$targetFact[data$targetLevel=="medium"] = "2"
data$setting2 = paste(data$dir2,data$targetFact,sep="")
data$setting = paste(data$setting1,data$setting2,sep="")
settings = c("R1R2","R1R3","R2R3","R2R1","R3R1","R3R2",
"R1L2","R1L3","R2L3","L2R1","L3R1","L3R2",
"L1R2","L1R3","L2R3","R2L1","R3L1","R3L2",
"L1L2","L1L3","L2L3", "L2L1","L3L1","L3L2")
ind = c(1:24)
ind = (i-1)*24+ind
match = function(x) ind[which(x==settings)]
data$level = lapply(data$setting,match)
integralcoh1s = c(right_coh[1],right_coh[1],right_coh[2],right_coh[2],right_coh[3],right_coh[3],
right_coh[1],right_coh[1],right_coh[2],left_coh[2],left_coh[3],left_coh[3],
left_coh[1],left_coh[1],left_coh[2],right_coh[2],right_coh[3],right_coh[3],
left_coh[1],left_coh[1],left_coh[2],left_coh[2],left_coh[3],left_coh[3])
integralcoh2s = c(right_coh[2],right_coh[3],right_coh[3],right_coh[1],right_coh[1],right_coh[2],
left_coh[2],left_coh[3],left_coh[3],right_coh[1],right_coh[1],right_coh[2],
right_coh[2],right_coh[3],right_coh[3],left_coh[1],left_coh[1],left_coh[2],
left_coh[2],left_coh[3],left_coh[3],left_coh[1],left_coh[1],left_coh[2])
levels = unlist(data$level,use.names = FALSE)
subjData = data.frame(coh1_data, coh2_data, conf_data, choice1_data, choice_data, levels, correct, posteriorFactor, condition)
subjData$id = i
subjInts = data.frame(integralcoh1s, integralcoh2s)
subjInts$id = i
if(i==1){
fullData = subjData
fullInts = subjInts
}else{
fullData = rbind(fullData, subjData)
fullInts = rbind(fullInts, subjInts)
}
i = i+1
}
N_data = length(fullData$id)
L_data = length(subjs)
ll_data = fullData$id
intmap_data = fullInts$id
coh1_data = fullData$coh1_data
coh2_data = fullData$coh2_data
choice1_data = fullData$choice1_data
choice_data = fullData$choice_data
conf_data = fullData$conf_data
levels = fullData$levels
coh1Ints = fullInts$integralcoh1s
coh2Ints = fullInts$integralcoh2s
posteriorFactor = fullData$posteriorFactor
condition = fullData$condition
correct = fullData$correct
if (fitModel){
file <- file.path(baseDir, "fullModel_h_par_nor1r2.stan")
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
grainsize = (N_data/3)/2
alldata <- list(N=N_data, L=L_data, ll=ll_data, intMap=intmap_data, coh1=coh1_data, coh2=coh2_data, choice1=choice1_data, choice=choice_data, conf=conf_data,trials=c(1:N_data),coh1Int=coh1Ints, coh2Int=coh2Ints, levels=levels, grainsize=grainsize)
Nchains <- 3
Niter <- 2000
Nburn <- 2000
parameters = c("m1_mu","m1_sd","m1","m2_mu","m2_sd","m2","b_mu","b_sd","b")
initfun <- function() {
list(m1_mu=runif(1,0.5,1.5), m1_sd=runif(1,0.5,1.5), m1=runif(L_data,0.5,1.5),
m2_mu=runif(1,0.5,1.5), m2_sd=runif(1,0.5,1.5),m2=runif(L_data,0.5,1.5),
b_mu=runif(1,0.5,1.5), b_sd=runif(1,0.5,1.5),b=runif(L_data,0.5,1.5)
)
}
init = list(initfun(),initfun(),initfun())
# Compile and run
tic("model fitting")
fit <- mod$sample(alldata,
chains = 3,
parallel_chains = 3,
threads_per_chain = 3,
refresh = 100,
init=init, iter_sampling = Niter, iter_warmup = Nburn, max_treedepth = 10, save_warmup = 1)
toc()
summary = summarise_draws(bind_draws(fit$draws(variables=parameters), along = "chain"))
fit$diagnostic_summary()
diag = fit$sampler_diagnostics(format="df")
mcmc_trace(fit$draws(variables=c("m2_mu","m2_sd")))
stanfit <- rstan::read_stan_csv(fit$output_files())
save(stanfit, file=file.path(resultDir, "full_h_stanfit_nor1r2_2000bi_2000s.RData"))
params = rstan::summary(stanfit, pars=parameters,use_cache=FALSE)$summary
save(params, file=file.path(resultDir, "full_h_summary_nor1r2_2000bi_2000s.RData"))
traceplot(stanfit, ask = T, inc_warmup=F, pars=c("m1_mu","m2_mu","b_mu"))
traceplot(stanfit, ask = T, inc_warmup=F, pars=c("m1_sd","m2_sd","b_sd"))
m1_mu = rstan::extract(stanfit, "m1_mu", inc_warmup = FALSE,
include = TRUE)
m2_mu = rstan::extract(stanfit, "m2_mu", inc_warmup = FALSE,
include = TRUE)
b_mu = rstan::extract(stanfit, "b_mu", inc_warmup=FALSE,include=TRUE)
posteriors = as.matrix(data.frame(wChoice_mu=unlist(m1_mu, use.names = FALSE), wConf_mu=unlist(m2_mu, use.names = FALSE),b_mu))
save(posteriors, file=file.path(resultDir, "full_h_posteriors_nor1r2_2000bi_2000s.RData"))
}else{
load(file.path(resultDir, "full_h_posteriors_nor1r2_2000bi_2000s.RData"))
load(file.path(resultDir, "full_h_summary_nor1r2_2000bi_2000s.RData"))
}
require(rstan)
require(shinystan)
require(parallel)
require(loo)
require(here)
require(dplyr)
library("ggplot2")
library("bayesplot")
library("rstanarm")
library("tictoc")
library(posterior)
library(cmdstanr)
library(bayestestR)
dataDir = here::here("Data/")
baseDir = here::here("Stan/hierarchical")
resultDir = here::here("Results/modelFits/")
load(file=file.path(dataDir, "expFitNoiseRaw.RData"))
fitModel = TRUE
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
##### Get real data for a subject to fit #####
experiment = exp_fitNoiseRaw
subjs = unique(experiment$ID)
# Exclude extreme outlier
subjs = subjs[c(1:8,10:21)]
i = 1
for (subj in subjs){
data = experiment %>% dplyr::filter(ID==subj)
# Adjust their raw coherence values
data$coherentDir1 = -sign(data$prior_direction-1)
data$signedCoh1 = data$prior_coherence*data$coherentDir1
data$adjCoh1 = (data$signedCoh1-data$fitBiasRaw)/data$fitNoiseRaw
data$coherentDir2 = -sign(data$target_direction-1)
data$signedCoh2 = data$target_coherence*data$coherentDir2
data$adjCoh2 = (data$signedCoh2-data$fitBiasRaw)/data$fitNoiseRaw
data$choice = 1
data$choice[data$discrimination_key=="left"] = 0
data$choice1 = 1
data$choice1[data$prior_key=="left"] = 0
## This takes the mean coherences per precision level (so, per staircase)
means = data %>% dplyr::group_by(priorLevel, prior_direction) %>%
dplyr::summarize(meanCohs = mean(adjCoh1))
means$priorLevel = factor(means$priorLevel, levels=c("low","medium","high"))
means = means[order(means$priorLevel),]
right_coh = means$meanCohs[means$prior_direction==0]
left_coh = means$meanCohs[means$prior_direction==180]
## Setup data
coh1_data = data$adjCoh1
coh2_data = data$adjCoh2
conf_data = data$conf/100
choice1_data = data$choice1
choice_data = data$choice
correct = data$discrimination_is_correct
posteriorFactor = data$posteriorFactor
condition = data$condition
data$dir1 = ifelse(data$coherentDir1==1,"R","L")
data$priorFact = "3"
data$priorFact[data$priorLevel=="low"] = "1"
data$priorFact[data$priorLevel=="medium"] = "2"
data$setting1 = paste(data$dir1,data$priorFact,sep="")
data$dir2 = ifelse(data$coherentDir2==1,"R","L")
data$targetFact = "3"
data$targetFact[data$targetLevel=="low"] = "1"
data$targetFact[data$targetLevel=="medium"] = "2"
data$setting2 = paste(data$dir2,data$targetFact,sep="")
data$setting = paste(data$setting1,data$setting2,sep="")
settings = c("R1R2","R1R3","R2R3","R2R1","R3R1","R3R2",
"R1L2","R1L3","R2L3","L2R1","L3R1","L3R2",
"L1R2","L1R3","L2R3","R2L1","R3L1","R3L2",
"L1L2","L1L3","L2L3", "L2L1","L3L1","L3L2")
ind = c(1:24)
ind = (i-1)*24+ind
match = function(x) ind[which(x==settings)]
data$level = lapply(data$setting,match)
integralcoh1s = c(right_coh[1],right_coh[1],right_coh[2],right_coh[2],right_coh[3],right_coh[3],
right_coh[1],right_coh[1],right_coh[2],left_coh[2],left_coh[3],left_coh[3],
left_coh[1],left_coh[1],left_coh[2],right_coh[2],right_coh[3],right_coh[3],
left_coh[1],left_coh[1],left_coh[2],left_coh[2],left_coh[3],left_coh[3])
integralcoh2s = c(right_coh[2],right_coh[3],right_coh[3],right_coh[1],right_coh[1],right_coh[2],
left_coh[2],left_coh[3],left_coh[3],right_coh[1],right_coh[1],right_coh[2],
right_coh[2],right_coh[3],right_coh[3],left_coh[1],left_coh[1],left_coh[2],
left_coh[2],left_coh[3],left_coh[3],left_coh[1],left_coh[1],left_coh[2])
levels = unlist(data$level,use.names = FALSE)
subjData = data.frame(coh1_data, coh2_data, conf_data, choice1_data, choice_data, levels, correct, posteriorFactor, condition)
subjData$id = i
subjInts = data.frame(integralcoh1s, integralcoh2s)
subjInts$id = i
if(i==1){
fullData = subjData
fullInts = subjInts
}else{
fullData = rbind(fullData, subjData)
fullInts = rbind(fullInts, subjInts)
}
i = i+1
}
N_data = length(fullData$id)
L_data = length(subjs)
ll_data = fullData$id
intmap_data = fullInts$id
coh1_data = fullData$coh1_data
coh2_data = fullData$coh2_data
choice1_data = fullData$choice1_data
choice_data = fullData$choice_data
conf_data = fullData$conf_data
levels = fullData$levels
coh1Ints = fullInts$integralcoh1s
coh2Ints = fullInts$integralcoh2s
posteriorFactor = fullData$posteriorFactor
condition = fullData$condition
correct = fullData$correct
if (fitModel){
file <- file.path(baseDir, "fullModel_h_par_nor1r2.stan")
mod <- cmdstan_model(file, cpp_options = list(stan_threads = TRUE))
grainsize = (N_data/3)/2
alldata <- list(N=N_data, L=L_data, ll=ll_data, intMap=intmap_data, coh1=coh1_data, coh2=coh2_data, choice1=choice1_data, choice=choice_data, conf=conf_data,trials=c(1:N_data),coh1Int=coh1Ints, coh2Int=coh2Ints, levels=levels, grainsize=grainsize)
Nchains <- 3
Niter <- 2000
Nburn <- 2000
parameters = c("m1_mu","m1_sd","m1","m2_mu","m2_sd","m2","b_mu","b_sd","b")
initfun <- function() {
list(m1_mu=runif(1,0.5,1.5), m1_sd=runif(1,0.5,1.5), m1=runif(L_data,0.5,1.5),
m2_mu=runif(1,0.5,1.5), m2_sd=runif(1,0.5,1.5),m2=runif(L_data,0.5,1.5),
b_mu=runif(1,0.5,1.5), b_sd=runif(1,0.5,1.5),b=runif(L_data,0.5,1.5)
)
}
init = list(initfun(),initfun(),initfun())
# Compile and run
tic("model fitting")
fit <- mod$sample(alldata,
chains = 3,
parallel_chains = 3,
threads_per_chain = 3,
refresh = 100,
init=init, iter_sampling = Niter, iter_warmup = Nburn, max_treedepth = 10, save_warmup = 1)
toc()
summary = summarise_draws(bind_draws(fit$draws(variables=parameters), along = "chain"))
fit$diagnostic_summary()
diag = fit$sampler_diagnostics(format="df")
mcmc_trace(fit$draws(variables=c("m2_mu","m2_sd")))
stanfit <- rstan::read_stan_csv(fit$output_files())
save(stanfit, file=file.path(resultDir, "full_h_stanfit_nor1r2_2000bi_2000s.RData"))
params = rstan::summary(stanfit, pars=parameters,use_cache=FALSE)$summary
save(params, file=file.path(resultDir, "full_h_summary_nor1r2_2000bi_2000s.RData"))
traceplot(stanfit, ask = T, inc_warmup=F, pars=c("m1_mu","m2_mu","b_mu"))
traceplot(stanfit, ask = T, inc_warmup=F, pars=c("m1_sd","m2_sd","b_sd"))
m1_mu = rstan::extract(stanfit, "m1_mu", inc_warmup = FALSE,
include = TRUE)
m2_mu = rstan::extract(stanfit, "m2_mu", inc_warmup = FALSE,
include = TRUE)
b_mu = rstan::extract(stanfit, "b_mu", inc_warmup=FALSE,include=TRUE)
posteriors = as.matrix(data.frame(wChoice_mu=unlist(m1_mu, use.names = FALSE), wConf_mu=unlist(m2_mu, use.names = FALSE),b_mu))
save(posteriors, file=file.path(resultDir, "full_h_posteriors_nor1r2_2000bi_2000s.RData"))
}else{
load(file.path(resultDir, "full_h_posteriors_nor1r2_2000bi_2000s.RData"))
load(file.path(resultDir, "full_h_summary_nor1r2_2000bi_2000s.RData"))
}
