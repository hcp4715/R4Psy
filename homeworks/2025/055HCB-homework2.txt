title: "Test1"
author: "Huangchuanbin"
date: "`r Sys.Date(2025.5.25)`"
output:
  html_document: default
pdf_document: default
---
#Q1 读取数据
  Q1 <- read.csv("D:\\A南师大\\R语言\\第二次作业\\penguin_rawdata.csv", stringsAsFactors = FALSE)
library(dplyr)
#Q2 学号为242302055，应选取"Kassel"站点第1-20行）
Q2 <- Q1 %>%
  filter(Site == "Kassel") %>%
  slice(1:20)
# Q3 选择变量
 Q3 <- Q2 %>%
   select(health, phone1, phone2, phone3, phone4, phone5, phone6, phone7, phone8, phone9)

# Q3 查看数据类型
 str(Q3)

 #> # Q3 查看数据类型
 # >  str(Q3)
 #'data.frame':	20 obs. of  10 variables:
 # $ health: int  3 5 4 3 1 2 3 4 2 2 ...
 #$ phone1: int  4 2 2 1 1 1 3 3 3 3 ...
 #$ phone2: int  4 4 3 1 1 2 3 3 4 4 ...
 #$ phone3: int  4 1 3 1 1 1 2 3 2 2 ...
 #$ phone4: int  4 4 2 1 1 2 4 3 4 4 ...
 #$ phone5: int  3 1 2 1 1 1 3 3 1 4 ...
 #$ phone6: int  4 3 1 1 1 1 1 3 1 2 ...
 #$ phone7: int  4 1 1 1 1 1 1 3 2 4 ...
 #$ phone8: int  2 1 2 1 2 1 4 3 2 3 ...
 #$ phone9: chr  "4" "2" "2" "1" ...
 
#Q3 转换字符型为数值型
 Q3 <- Q3 %>%
   mutate(across(c(health, starts_with("phone")), as.numeric))
 
 #Q4 转换health为有序因子
 Q4 <- Q3 %>%
   mutate(health = factor(health,
                          levels = 1:5,
                          labels = c("Poor", "Fair", "Good", "Very Good", "Excellent")))
 # Q5-Q9
 Q5 <- Q4$health
 Q6_1 <- "Poor" %in% Q5
 Q6_2 <- "Fair" %in% Q5
 Q7 <- paste(Q5, collapse = ", ")
 Q8 <- str_length(Q5)
 Q9 <- str_sub(Q5, 1, 1)
 
 # Q10，添加行号和计算phone总和
 Q10 <- Q4 %>%
   mutate(
     Num = row_number(),  # 添加行号
     across(starts_with("phone"), as.numeric),  # 确保 phone 列是数值型
     phone_total = rowSums(select(., starts_with("phone")), na.rm = TRUE)  # 计算总和
   )
          
 # Q11，正确筛选health >= Good的记录
 Q11 <- Q10 %>%
   filter(as.numeric(health) >= 3) %>%  # "Good" 对应因子级别 3
   pull(Num)  # 提取行号
 
 Q10 <- Q10 %>%
   mutate(phone_total = rowSums(select(., starts_with("phone")), na.rm = TRUE))
 # Q13
 Q13 <- Q10 %>%
   filter(as.numeric(health) >= 3 & phone_total >= 36) %>%
   pull(Num)
 #> # Q13 查看数据类型
  str(Q13)
 
  # >  #> # Q13 查看数据类型
   # >   str(Q13)
  #int [1:10] 1 2 3 7 8 13 14 15 16 19
  
  
##### 
 # 14. 创建函数func
 func <- function(a = 1, b = 1) {
   (a + b)^2
 }
 Q14 <- func(3, 4)
 # Q14 查看数据类型
 str(Q14)
# >  # Q14 查看数据类型
#   >  str(Q14)
# num 49
 
 # 15. 创建函数func2
 func2 <- function(x) {
   data.frame(mean = mean(x), sd = sd(x))
 }
 Q15 <- func2(c(1, 2, 3, 4, 5))
 # Q15 查看数据类型
 str(Q15)
#>  # Q15 查看数据类型
#   >  str(Q15)
# 'data.frame':	1 obs. of  2 variables:
#   $ mean: num 3
# $ sd  : num 1.58
 
 
 # 16. 创建函数fun3
 fun3 <- function(x = 10) {
   x %% 2 == 0
 }
 Q16 <- fun3(22)
 # Q16 查看数据类型
    str(Q16)
#> # Q16 查看数据类型
#  >     str(Q16)
#    logi TRUE
    
 # 17. 创建函数func4
 func4 <- function(x) {
   if(x > 0) "Positive"
   else if(x < 0) "Negative"
   else "Zero"
 }
 Q17 <- func4(-3)
 # Q17 查看数据类型
 str(Q17)
 #>  # Q17 查看数据类型
  # >  str(Q17)
 #chr "Negative"
 
 
 # 18. 创建函数func5
 func5 <- function(x) {
   if(x >= 90) "A"
   else if(x >= 80) "B"
   else if(x >= 70) "C"
   else if(x >= 60) "D"
   else "E"
 }
 Q18 <- func5(95)
 # Q18 查看数据类型
 str(Q18)
 #>  # Q18 查看数据类型
  # >  str(Q18)
 #chr "A"
 
 
 # 19. 创建函数func6
 func6 <- function(n) {
   result <- 1
   for(i in 1:n) {
     result <- result * i
   }
   result
 }
 Q19 <- func6(5)
 
# Q19 查看数据类型
    str(Q19)
   # >Q19 查看数据类型
    #  >str(Q19)
    #num 120