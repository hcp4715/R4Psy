---
title: "Test_Coding"
author: "czx"
date: "`r Sys.Date()`"
output: html_document
---

## 2025.4.9

### Loading Packages
```{r}
if (!requireNamespace('pacman', quietly = TRUE)) {
    install.packages('pacman')
}


pacman::p_load(
  # 本节课需要用到的 packages
  here,skimr,quartets,GGally,showtext,bruceR,tidyverse,DataExplorer,
  # 生成课件
  xaringan,xaringanthemer,xaringanExtra)
```

### Loading Data
```{r}
# 获取所有的 .out 文件名
files <- list.files(here::here("data", "match"), pattern = "data_exp7_rep_match_.*\\.out$", full.names = TRUE)

# 定义数据类型转换函数
convert_data_types = function(df) {
  df <- df %>%
    dplyr::mutate(Date = as.character(Date),
                  Prac = as.character(Prac),
                  Sub = as.numeric(Sub),
                  Age = as.numeric(Age),
                  Sex = as.character(Sex),
                  Hand = as.character(Hand),
                  Block = as.numeric(Block),
                  Bin = as.numeric(Bin),
                  Trial = as.numeric(Trial),
                  Shape = as.character(Shape),
                  Label = as.character(Label),
                  Match = as.character(Match),
                  CorrResp = as.character(CorrResp),
                  Resp = as.character(Resp),
                  ACC = as.numeric(ACC),
                  RT = as.numeric(RT))
  return(df)
}

# 读取每个 .out 文件并清洗数据
df3 <- lapply(files, function(file) {
  df <- read.table(file, header = TRUE)
  df <- dplyr::filter(df, Date != "Date") # 过滤掉标题残留行
  df <- convert_data_types(df)            # 类型转换
  return(df)
})

# 合并所有数据框
df3 <- dplyr::bind_rows(df3)

# 清除中间变量
rm(files)

# 保存合并的数据
write.csv(df3, 
          file = here::here("data", "match", "match_raw.csv"),
          row.names = FALSE)

```

### Compute d prime
```{r}
library(dplyr)
library(tidyr)

# Step 1-4: 计算每个 Sub × Shape 条件下的 d′ 值
df_dprime <- df3 %>%
  dplyr::filter(!is.na(ACC), !is.na(Match)) %>%
  dplyr::group_by(Sub, Shape) %>%
  dplyr::summarise(
    hit  = sum(Match == "match" & ACC == 1),
    cr   = sum(Match == "mismatch" & ACC == 0),
    miss = sum(Match == "match" & ACC == 0),
    fa   = sum(Match == "mismatch" & ACC == 1),
    .groups = "drop"
  ) %>%
  dplyr::mutate(
    # 击中率、虚报率
    hit_rate = ifelse((hit + miss) > 0,
                      ifelse(hit / (hit + miss) < 1, hit / (hit + miss), 1 - 1 / (2 * (hit + miss))),
                      NA),
    fa_rate = ifelse((fa + cr) > 0,
                     ifelse(fa / (fa + cr) > 0, fa / (fa + cr), 1 / (2 * (fa + cr))),
                     NA),
    # 计算 d' 值
    dprime = qnorm(hit_rate) - qnorm(fa_rate)
  ) %>%
  dplyr::select(Sub, Shape, dprime)

# Step 5: 长转宽，每个 shape 一个列
df_dprime_wide <- df_dprime %>%
  tidyr::pivot_wider(names_from = Shape, values_from = dprime, names_prefix = "d_")

# 查看结果
head(df_dprime_wide)
```

### Draw hit-rate
```{r}
library(dplyr)
library(ggplot2)

# 1. 计算每个 Subject × Shape 下的击中率
df_hit_rate <- df3 %>%
  filter(!is.na(ACC), Match == "match") %>%
  group_by(Sub, Shape) %>%
  summarise(hit_rate = mean(ACC), .groups = "drop") # 击中率 = match 情况下 ACC=1 的比例

# 2. 绘图：不同 Shape 下的 boxplot
ggplot(df_hit_rate, aes(x = Shape, y = hit_rate)) +
  geom_boxplot(fill = "lightblue", color = "darkblue") +
  labs(title = "Hit Rate by Shape",
       x = "Shape",
       y = "Hit Rate") +
  theme_minimal(base_size = 14)

```

### Order Pic above
```{r}
# 重新设置 Shape 的顺序
df_hit_rate$Shape <- factor(df_hit_rate$Shape,
                            levels = c("moralSelf", "immoralSelf", "moralOther", "immoralOther"))

# 再次绘图，boxplot将按照你设定的顺序排列
ggplot(df_hit_rate, aes(x = Shape, y = hit_rate)) +
  geom_boxplot(fill = "lightgreen", color = "darkgreen") +
  labs(title = "Hit Rate by Shape (Ordered)",
       x = "Shape",
       y = "Hit Rate") +
  theme_minimal(base_size = 14)

```

### Draw dot pic
```{r eval = T}
# 读取数据
pg_raw <- bruceR::import(here::here(
  "data", "penguin","penguin_rawdata.csv"))

mt_raw <- bruceR::import(here::here(
  "data", "match","match_raw.csv")) 
```

```{r fig.height=4, fig.width=6, message=FALSE, warning=FALSE,out.width='70%'}
 DataExplorer::plot_qq(mt_raw)
```

```{r fig.height=4, fig.width=6, message=FALSE, warning=FALSE,out.width='70%'}
 DataExplorer::plot_qq(pg_raw)
```


```{r}
ggplot(pg_raw, aes(x = age, y = health, color = factor(sex))) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Age vs. Glucose by Sex", x = "Age", y = "Total Glucose", color = "Sex")

```






